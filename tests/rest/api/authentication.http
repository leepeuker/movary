POST http://127.0.0.1/api/authentication/token
Accept: */*
Cache-Control: no-cache
Content-Type: application/json
X-Movary-Client: RestAPI Test

{}

> {%
    client.test("Response has correct status code", function() {
        let expected = 400
        client.assert(response.status === expected, "Expected status code: " + expected);
    });
    client.test("Response has correct body", function() {
        let expected = '{"error":"MissingCredentials","message":"Email or password is missing"}';
        client.assert(JSON.stringify(response.body) === expected, "Expected response body: " + expected);
    });
%}

###

POST http://127.0.0.1/api/authentication/token
Accept: */*
Cache-Control: no-cache
Content-Type: application/json
X-Movary-Client: RestAPI Test

{"email" : "wrongEmail", "password" : "wrongPassword"}

> {%
    client.test("Response has correct status code", function() {
        let expected = 401
        client.assert(response.status === expected, "Expected status code: " + expected);
    });
    client.test("Response has correct body", function() {
        let expected = '{"error":"InvalidCredentials","message":"Invalid credentials"}';
        client.assert(JSON.stringify(response.body) === expected, "Expected response body: " + expected);
    });
%}

###

POST http://127.0.0.1/api/authentication/token
Accept: */*
Cache-Control: no-cache
Content-Type: application/json
X-Movary-Client: RestAPI Test

{"email" : "{{email}}", "password" : "{{password}}"}

> {%
    client.test("Response has correct status code", function() {
        let expected = 200
        client.assert(response.status === expected, "Expected status code: " + expected);
    });
    client.test("Response has correct body", function() {
        client.assert(response.body.hasOwnProperty("user") === true, "Response body missing property: user");
        client.assert(response.body.hasOwnProperty("authToken") === true, "Response body missing property: authToken");
        client.assert(response.body.user.hasOwnProperty("id") === true, "Response body missing property: id");
        client.assert(response.body.user.hasOwnProperty("name") === true, "Response body missing property: name");
        client.assert(response.body.user.hasOwnProperty("isAdmin") === true, "Response body missing property: isAdmin");
    });

    client.global.set("responseAuthToken", response.body.authToken);
%}

###

GET http://127.0.0.1/api/authentication/token
Accept: */*
Cache-Control: no-cache
Content-Type: application/json
X-Movary-Token: {{responseAuthToken}}

> {%
    client.test("Response has correct status code", function() {
        let expected = 200
        client.assert(response.status === expected, "Expected status code: " + expected);
    });
    client.test("Response has correct body", function() {
        client.assert(response.body.hasOwnProperty("user") === true, "Response body missing property: user");
        client.assert(response.body.user.hasOwnProperty("id") === true, "Response body missing property: id");
        client.assert(response.body.user.hasOwnProperty("name") === true, "Response body missing property: name");
        client.assert(response.body.user.hasOwnProperty("isAdmin") === true, "Response body missing property: isAdmin");
    });
%}

###

DELETE http://127.0.0.1/api/authentication/token
Accept: */*
Cache-Control: no-cache
Content-Type: application/json
X-Movary-Token: {{responseAuthToken}}

> {%
    client.test("Response has correct status code", function() {
        let expected = 204
        client.assert(response.status === expected, "Expected status code: " + expected);
    });
%}

###

DELETE http://127.0.0.1/api/authentication/token
Accept: */*
Cache-Control: no-cache
Content-Type: application/json

> {%
    client.test("Response has correct status code", function() {
        let expected = 400
        client.assert(response.status === expected, "Expected status code: " + expected);
    });
    client.test("Response has correct body", function() {
        let expected = '{"error":"MissingAuthToken","message":"Authentication token header is missing"}';
        client.assert(JSON.stringify(response.body) === expected, "Expected response body: " + expected);
    });
%}

###
